#!/usr/bin/env python3

############################################################################
#
#  Copyright 2023 The SVUnit Authors.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
############################################################################


import argparse
import enum
import pathlib
import subprocess
import sys


class ExitCode(enum.Enum):
    CMDLINE_USAGE_ERROR = 4


class ArgumentParser(argparse.ArgumentParser):

    def error(self, message):
        self.print_help(sys.stderr)
        self.exit(ExitCode.CMDLINE_USAGE_ERROR.value, '%s: error: %s\n' % (self.prog, message))


SIMULATORS = [
        "questa",
        "modelsim",
        "vsim",
        "qrun",
        "riviera",
        "ius",
        "irun",
        "xcelium",
        "xrun",
        "vcs",
        "dsim",
        "verilator",
        ]


def main():
    parser = get_parser()
    args = parser.parse_args()
    execute_legacy_script()


def get_parser():
    parser = ArgumentParser()
    parser.add_argument("-s", "--sim", metavar="<simulator>", choices=SIMULATORS, type=str.lower, help="simulator is either of %s"%", ".join(SIMULATORS))
    parser.add_argument("-l", "--log", metavar="<log>", help="simulation log file (default: run.log)")
    parser.add_argument("-d", "--define", metavar="<macro>", action="append", help="appended to the command line as +define+<macro>")
    parser.add_argument("-f", "--filelist", metavar="<file>", help="some verilog file list")
    parser.add_argument("-r", "--r_arg", metavar="<option>", action="append", help="specify additional runtime options")
    parser.add_argument("-c", "--c_arg", metavar="<option>", action="append", help="specify additional compile options")
    parser.add_argument("-U", "--uvm", action="store_true", help="run SVUnit with UVM")
    parser.add_argument("-o", "--out", metavar="<dir>", help="output directory for tmp and simulation files")
    parser.add_argument("-t", "--test", metavar="<test>", action="append", help="specifies a unit test to run (multiple can be given)")
    parser.add_argument("-m", "--mixedsim", metavar="<vhdlfile>", help="consolidated file list with VHDL files and command line switches")
    parser.add_argument("-w", "--wavedrom", action="store_true", help="process json files as wavedrom output")
    parser.add_argument("--filter", metavar="<filter>", help="specify which tests to run, as <test_module>.<test_name>")
    parser.add_argument("--directory", metavar="<dir>", type=relative_path, action="append", help="only run svunit discovery on selected directories")
    parser.add_argument("--enable-experimental", action="store_true", help="enable experimental features")
    return parser


def relative_path(string):
    path = pathlib.Path(string)
    if path.is_absolute():
        raise argparse.ArgumentTypeError("absolute paths are not yet supported")
    return path


def execute_legacy_script():
    this_script = pathlib.Path(__file__).resolve()
    legacy_script = this_script.parent.joinpath("runSVUnit.pl")
    subprocess.run([legacy_script] + sys.argv[1:], check=True)


main()
